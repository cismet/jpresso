/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * OptionsTopComponent.java
 *
 * Created on 4. MÃ¤rz 2008, 16:17
 */
package de.cismet.jpresso.project.gui.options;

import java.awt.BorderLayout;

import java.io.File;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import de.cismet.jpresso.core.data.DriverDescription;
import de.cismet.jpresso.core.data.ProjectOptions;
import de.cismet.jpresso.core.serviceprovider.exceptions.DuplicateEntryException;

import de.cismet.jpresso.project.filetypes.options.OptionsDataObject;
import de.cismet.jpresso.project.gui.AbstractJPTopComponent;
import de.cismet.jpresso.project.serviceprovider.ClassResourceListener;
import de.cismet.jpresso.project.serviceprovider.ProjectClassResourceProvider;

/**
 * TopComponent to visualize a project's global options.
 *
 * @author   srichter
 * @version  $Revision$, $Date$
 */
public final class OptionsTopComponent extends AbstractJPTopComponent<OptionsDataObject> {

    //~ Static fields/initializers ---------------------------------------------

    private static final String PREFERRED_ID = "OptionsTopComponent";

    //~ Instance fields --------------------------------------------------------

    private final OptionsDataObject options;
    private final Vector<ClassResourceListener> listener;
    private final ProjectOptionsEditor editor;
    private boolean classPathChanged;
    private boolean driverChanged;

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form OptionsTopComponent.
     *
     * @param  data  DOCUMENT ME!
     */
    public OptionsTopComponent(final OptionsDataObject data) {
        super(data);
        options = data;
        initComponents();
        // TODO nullpointer check crp!
        final ProjectClassResourceProvider crp = getProject().getLookup().lookup(ProjectClassResourceProvider.class);
        listener = new Vector<ClassResourceListener>();
        this.addListener(crp);
        this.editor = new ProjectOptionsEditor(data.getData());
        this.add(editor, BorderLayout.CENTER);
        this.editor.addListener(new ProjectOptionsEditorListener() {

                @Override
                public void projectDriverListChanged(final List<DriverDescription> driverPath)
                        throws DuplicateEntryException {
                    driverChanged = true;
                    getData().setModified(true);
                }

                @Override
                public void projectClassPathChanged(final List<File> newClassPath) {
                    classPathChanged = true;
                    getData().setModified(true);
                }

                @Override
                public void otherOptionsChanged() {
                    getData().setModified(true);
                }
            });
        if (log.isDebugEnabled()) {
            log.debug("OptionsTopComponent created!");
        }
        classPathChanged = false;
        driverChanged = false;
    }

    //~ Methods ----------------------------------------------------------------

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    /**
     * @see  org.openide.windows.TopComponent
     */
    @Override
    public String getDisplayName() {
        final String saveMark = getData().isModified() ? MARK_MODIFIED : EMPTY;
        if ((getData() == null) || (getData().getPrimaryFile() == null)
                    || (getData().getPrimaryFile().getParent() == null)
                    || (getData().getPrimaryFile().getParent().getParent() == null)) {
            return getName() + saveMark;
        } else {
            return getName() + PROJECT_NAME_PREFIX + getData().getPrimaryFile().getParent().getName()
                        + PROJECT_NAME_POSTFIX + saveMark;
        }
    }

    /**
     * @see  org.openide.windows.TopComponent
     */
    @Override
    public String getName() {
        return "Options";
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setMinimumSize(new java.awt.Dimension(593, 697));
        setPreferredSize(new java.awt.Dimension(593, 697));
        setLayout(new java.awt.BorderLayout());
    } // </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void removeAllListenerOnClosed() {
//        removeAllListener();
    }

    @Override
    public void addOutput(final JPanel out) {
        // nothing...has no output
    }

    @Override
    public boolean updateDataObject() {
        final ProjectOptions opt = editor.getContent();
        if (classPathChanged) {
            options.getData().setAddClassPath(opt.getAddClassPath());
        }
        if (driverChanged) {
            options.getData().setDriver(opt.getDriver());
        }
        for (final ClassResourceListener l : listener) {
            if (classPathChanged) {
                l.projectClassPathChanged(new ArrayList<File>(opt.getAddClassPath()));
            }
            if (driverChanged) {
                try {
                    l.projectDriverListChanged(opt.getDriver());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(
                        this,
                        "Can not save:\n"
                                + "Driver aliases must be unique! Found duplicated alias!",
                        "Duplicated Driver Alias",
                        JOptionPane.WARNING_MESSAGE);
                    return false;
                }
            }
        }
        options.getData().setDefaultFinalizerClass(opt.getDefaultFinalizerClass());
        options.getData().setDefaultFinalizerProperties(opt.getDefaultFinalizerProperties());
        driverChanged = false;
        classPathChanged = false;
        return true;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  l  DOCUMENT ME!
     */
    public void addListener(final ClassResourceListener l) {
        listener.add(l);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  l  DOCUMENT ME!
     */
    public void removeListener(final ClassResourceListener l) {
        listener.remove(l);
    }

    /**
     * DOCUMENT ME!
     */
    public void removeAllListener() {
        listener.clear();
    }
}
