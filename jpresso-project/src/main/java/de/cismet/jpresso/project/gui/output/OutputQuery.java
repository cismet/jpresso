/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * OutputQuery.java
 *
 * Created on 30. Januar 2008, 18:47
 */
package de.cismet.jpresso.project.gui.output;

import java.awt.Color;
import java.awt.Component;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import de.cismet.jpresso.project.gui.output.filtering.TableSortDecorator;

/**
 * DOCUMENT ME!
 *
 * @author   srichter
 * @version  $Revision$, $Date$
 */
public class OutputQuery extends JPanel {

    //~ Static fields/initializers ---------------------------------------------

    public static final String NULL = "<NULL>";

    //~ Instance fields --------------------------------------------------------

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jTable1;
    private javax.swing.JScrollPane scpOut;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form OutputQuery.
     */
    public OutputQuery() {
        initComponents();
        setName("Query");
    }

    /**
     * Creates a new OutputQuery object.
     *
     * @param  rs       DOCUMENT ME!
     * @param  maxRows  DOCUMENT ME!
     */
    public OutputQuery(final ResultSet rs, final int maxRows) {
        initComponents();
        try {
            setName("Query");
            update(rs);
            TableSortDecorator.decorate(jTable1);
        } catch (SQLException ex) {
            log.error("Problem with result set while creating query output table!", ex);
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param   resultSet  DOCUMENT ME!
     *
     * @throws  SQLException  DOCUMENT ME!
     */
    public void update(final ResultSet resultSet) throws SQLException {
        final ResultSetMetaData metaData = resultSet.getMetaData();
        final String[] columnNames = new String[metaData.getColumnCount()];

        for (int i = 0; i < columnNames.length; i++) {
            columnNames[i] = metaData.getColumnLabel(i + 1);
//            columnNames[i] = metaData.getColumnName(i + 1);
        }

        final DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0) {

                @Override
                public boolean isCellEditable(final int row, final int column) {
                    return false;
                }
            };

        int i = 1;

        while (resultSet.next()) { // && i < this.maxRows) {

            final Object[] objects = new Object[metaData.getColumnCount()];
            for (int j = 0; j < objects.length; ++j) {
                final Object cur = resultSet.getObject(j + 1);
                // FIX: BLOB-stop: if not, large BLOBs could fill up our memory, as they
                // stay referenced as long as this table is in memory!!!
                if (cur != null) {
                    objects[j] = cur.toString();
                } else {
                    objects[j] = NULL;
                }
            }

            tableModel.addRow(objects);
            ++i;
        }
        final DefaultTableCellRenderer r = new DefaultTableCellRenderer() {

                @Override
                public Component getTableCellRendererComponent(final JTable table,
                        final Object value,
                        final boolean isSelected,
                        final boolean hasFocus,
                        final int row,
                        final int column) {
                    final Component c = super.getTableCellRendererComponent(
                            table,
                            value,
                            isSelected,
                            hasFocus,
                            row,
                            column);
                    if (value.equals(NULL)) {
                        c.setForeground(Color.LIGHT_GRAY);
                    } else {
                        c.setForeground(Color.BLACK);
                    }
                    return c;
                }
            };
//        tblIntermed.setDefaultRenderer(String.class, r);
        jTable1.setDefaultRenderer(Object.class, r);
        jTable1.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        scpOut = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        scpOut.setPreferredSize(new java.awt.Dimension(200, 150));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] {}));
        scpOut.setViewportView(jTable1);

        add(scpOut, java.awt.BorderLayout.CENTER);
    } // </editor-fold>//GEN-END:initComponents
}
