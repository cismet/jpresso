/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * OutputFunctionTest.java
 *
 * Created on 30. Januar 2008, 17:47
 */
package de.cismet.jpresso.project.gui.output;

import java.awt.Dimension;
import java.awt.FlowLayout;

import java.lang.reflect.Method;

import javax.swing.JPanel;

/**
 * DOCUMENT ME!
 *
 * @author   srichter
 * @version  $Revision$, $Date$
 */
public class OutputFunctionTest extends JPanel {

    //~ Instance fields --------------------------------------------------------

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    private Method method;
    private Class tester;
    private javax.swing.JTextField[] params = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGo;
    private javax.swing.JPanel panOutput;
    private javax.swing.JPanel panParam;
    private javax.swing.JTextArea txtOut;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form OutputFunctionTest.
     *
     * @param  tester  DOCUMENT ME!
     * @param  method  DOCUMENT ME!
     */
    public OutputFunctionTest(final Class tester, final Method method) {
        this.method = method;
        this.tester = tester;
        initComponents();
        setName("Codetest " + method.getName());
        java.awt.GridBagConstraints gridBagConstraints;
        final Class[] ca = method.getParameterTypes();
        params = new javax.swing.JTextField[ca.length];
        for (int i = 0; i < ca.length; ++i) {
            final JPanel pan = new JPanel(new FlowLayout());
            final javax.swing.JLabel lblParam = new javax.swing.JLabel();
            final javax.swing.JTextField txtParam = new javax.swing.JTextField();
            txtParam.setPreferredSize(new Dimension(250, 25));
            pan.add(lblParam);
            pan.add(txtParam);
            lblParam.setFont(new java.awt.Font("Dialog", 0, 12));
            lblParam.setText("\u00dcbergabeparameter " + (i + 1));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = i;
            gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            panParam.add(pan, gridBagConstraints);

//            txtParam.setColumns(10);
//            txtParam.setFont(new java.awt.Font("Dialog", 0, 12));
//            txtParam.setToolTipText(ca[i].getName());
//            gridBagConstraints = new java.awt.GridBagConstraints();
//            gridBagConstraints.gridx = 1;
//            gridBagConstraints.gridy = i;
//            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
//            gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
//            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//            gridBagConstraints.weightx = 1.0;
//            panParam.add(txtParam, gridBagConstraints);
            revalidate();
            params[i] = txtParam;
        }
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panParam = new javax.swing.JPanel();
        panOutput = new javax.swing.JPanel();
        txtOut = new javax.swing.JTextArea();
        cmdGo = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        panParam.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panParam.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panParam, gridBagConstraints);

        panOutput.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panOutput.setLayout(new java.awt.GridBagLayout());

        txtOut.setEditable(false);
        txtOut.setFont(new java.awt.Font("Dialog", 0, 12));
        txtOut.setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        txtOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOutput.add(txtOut, gridBagConstraints);

        cmdGo.setFont(new java.awt.Font("Dialog", 1, 11));
        cmdGo.setForeground(javax.swing.UIManager.getDefaults().getColor(
                "CheckBoxMenuItem.acceleratorSelectionBackground"));
        cmdGo.setText(org.openide.util.NbBundle.getMessage(
                OutputFunctionTest.class,
                "OutputFunctionTest.cmdGo.text_1")); // NOI18N
        cmdGo.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cmdGoActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panOutput.add(cmdGo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panOutput, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents
    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cmdGoActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cmdGoActionPerformed
        final Object[] oa = new Object[method.getParameterTypes().length];
        final Class[] ca = method.getParameterTypes();

        try {
            for (int i = 0; i < oa.length; ++i) {
                final String p = params[i].getText();
                if (ca[i].equals(Boolean.class) || ca[i].equals(boolean.class)) {
                    oa[i] = Boolean.valueOf(p);
                } else if (ca[i].equals(Double.class) || ca[i].equals(double.class)) {
                    oa[i] = Double.valueOf(p);
                } else if (ca[i].equals(Integer.class) || ca[i].equals(int.class)) {
                    oa[i] = Integer.valueOf(p);
                } else if (ca[i].equals(Long.class) || ca[i].equals(long.class)) {
                    oa[i] = Long.valueOf(p);
                } else if (ca[i].equals(String.class)) {
                    oa[i] = p;
                } else {
                    oa[i] = null;
                }
            }
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(
                this,
                "Fehler beim Zuweisen der Parameter \n("
                        + ex
                        + ").",
                "Fehler",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            log.error("Fehler beim Testen einer Funktion.Fehler beim Zuweisen der Parameter.", ex);
            return;
        }
        Object o = null;
        try {
            o = method.invoke(tester, oa);
            if (o == null) {
                this.txtOut.setText("NULL");
            } else {
                this.txtOut.setText(o.toString());
            }
        } catch (java.lang.reflect.InvocationTargetException itEx) {
            javax.swing.JOptionPane.showMessageDialog(
                this,
                "Die Funktion erzeugt eine Ausnahme \n("
                        + itEx.getTargetException()
                        + ")",
                "Fehler",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(
                this,
                "Fehler beim Aufruf der Funktion \n("
                        + ex
                        + ").",
                "Fehler",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            log.error("Fehler beim Testen einer Funktion", ex);
        }
    } //GEN-LAST:event_cmdGoActionPerformed
}
